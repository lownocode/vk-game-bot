import { Keyboard } from "vk-io"
import YAML from "yaml"
import fs from "fs"
import axios from "axios"

import { features, formatSum } from "../../utils/index.js"
import { detectDiscount } from "../../functions/index.js"

const config = YAML.parse(
    fs.readFileSync(process.cwd() + "/data/config.yaml", "utf-8")
)

export const buyCoins = {
    access: "private",
    pattern: new RegExp(`^–∫—É–ø–∏—Ç—å ${config.bot.currency}$`, "i"),
    handler: async message => {
        const discounts = Object.keys(config.shopDiscounts)
            .map((key, index) => {
                return index > 0 ? `–û—Ç ${features.split(key)} ‚ÇΩ –≤—ã–≥–æ–¥–∞ ${config.shopDiscounts[key]}%` : null
            })
            .join("\n")

        const { text: _rubles } = await message.question(
            `ü§ë –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —É –Ω–∞—Å –µ—Å—Ç—å —Å–∫–∏–¥–∫–∏:\n\n${discounts}\n\n` +
            `–¶–µ–Ω–∞ –∑–∞ 1 000 000 ${config.bot.currency} ‚Äî ${config.shopPricePerMillion} ‚ÇΩ\n` +
            `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${config.bot.currency}:`
        )

        const rubles = formatSum(_rubles)

        if (!_rubles || isNaN(Number(rubles))) {
            return message.send("–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—É–º–º–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        }

        if (rubles < 1) {
            return message.send(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${config.bot.currency} ‚Äî 5 ‚ÇΩ`)
        }

        if (rubles > 15_000) {
            return message.send(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ${config.bot.currency} ‚Äî 15 000 ‚ÇΩ`)
        }

        const sum = (rubles * 1_000_000 / config.shopPricePerMillion) + ((rubles * 1_000_000) * (detectDiscount(rubles) / 100))

        return message.send(
            `üí° –í—ã –æ—Ç–¥–∞—ë—Ç–µ: ${features.split(rubles)} ‚ÇΩ\n` +
            `üí∞ –í—ã –ø–æ–ª—É—á–∏—Ç–µ: ${features.split(sum)} ${config.bot.currency}\n\n` +
            `üìé –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã`, {
                keyboard: await payButtons(sum, rubles, message)
            }
        )
    }
}

const payButtons = async (coins, rubles, message) => {
    const keyboard = Keyboard.builder()

    const { status, data: { response: { link: wdonateUrl } } } = await axios.post("https://wdonate.ru/api/getLink", {
        token: config.wdonate.token,
        userId: message.senderId,
        botId: config["vk-group"].id,
        sum: rubles
    })

    if (status === 200) {
        keyboard.urlButton({
            label: "WDonate",
            url: wdonateUrl
        })
    }

    return keyboard.inline()
}